{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","orders","setOrders","addOrder","o","a","onDonwload","window","scrollTo","html2canvas","document","getElementsByClassName","allowTaint","useCORS","letterRendering","scrollX","scrollY","scale","canvas","img","toDataURL","element","createElement","href","download","body","appendChild","click","className","onDragEnter","event","console","log","preventDefault","onDragLeave","onDragOver","onDrop","supportedFilesTypes","files","dataTransfer","i","length","file","type","indexOf","reader","FileReader","onload","e","bstr","target","result","wb","xlsx","read","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","name","includes","split","barcode","qty","order","j","readAsBinaryString","onClick","map","background","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e3e1795.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport xlsx from 'xlsx';\nimport Barcode from 'react-barcode';\nimport html2canvas from 'html2canvas';\nimport './App.css';\n\nfunction App() {\n\n  const [orders, setOrders] = useState([]);\n  const [page, setPage] = useState([0]);\n  const addOrder = (o) => {\n    setOrders(a => [...a, o]);\n  }\n\n  const onDragEnter = (event) => {\n    console.log(\"파일 감지\");\n    event.preventDefault();\n  }\n\n  const onDragLeave = (event) => {\n    console.log(\"파일 이탈 감지\");\n    event.preventDefault();\n  }\n\n  const onDragOver = (event) => {\n    console.log(\"이건뭐지\");\n    event.preventDefault();\n  }\n  \n  const onDropXlsx = (event) => {\n    console.log(\"파일 입력 감지\");\n    const supportedFilesTypes = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    const files = event.dataTransfer.files;\n    for (let i=0;i<files.length;i++) {\n      console.log(\"파일 읽음\");\n      const file = files[i];\n      console.log(`${file.type}`);\n      if(supportedFilesTypes.indexOf(file.type) > -1) {\n        console.log(\"파일 종류 통과\");\n        const reader = new FileReader();\n        reader.onload = e => {\n          const bstr = e.target.result;\n          const wb = xlsx.read(bstr, {type: 'binary'});\n          const wsname = wb.SheetNames[0];\n          const ws = wb.Sheets[wsname];\n          const data = xlsx.utils.sheet_to_json(ws, {header: 1});\n          console.log(data);\n          for (let i=21;i<data.length;i+=2) {\n            if(data[i][0] != '합계'){\n              let name = data[i][2];\n              if(name.includes(')')) {\n                name = name.split(')')[1];\n              }\n              const barcode = data[i+1][2];\n              const qty = data[i][5];\n              const order = {name: name, barcode: barcode, qty: qty};\n              for(let j=0;j<qty;j++) {\n                addOrder(order);\n              }\n            }\n          }\n        }\n        reader.readAsBinaryString(file);\n      }\n    }\n    window.scrollTo(0,0);\n    event.preventDefault();\n  }\n\n  const onDonwload = async () => {\n    window.scrollTo(0,0);\n    const canvas = await html2canvas(document.getElementsByClassName('A4')[0]\n      , {\n        allowTaint: true\n        , useCORS: true\n        , letterRendering: 1\n        , scrollX: 0\n        , scrollY: 0\n        , scale: 2.0\n      })\n\n      const img = canvas.toDataURL('image/jpeg');\n\n      const element = document.createElement(\"a\");\n      element.href = img;\n      element.download = 'orderlist.jpg';\n      document.body.appendChild(element);\n      element.click();\n  }\n\n  return (\n    <div className=\"App\"\n    onDragEnter={onDragEnter}\n    onDragLeave={onDragLeave}\n    onDragOver={onDragOver}\n    onDrop={onDropXlsx}>\n      <div className=\"topBar\">\n        <button className=\"download\" onClick={onDonwload}>다운로드</button>\n        {/* <button className=\"print\" onClick={print}>프린트</button> */}\n      </div>\n      <div className=\"A4\">\n        {orders.map((e, i) => {\n          if(i>=40) return;\n          return <div className=\"order\">\n                  <p className=\"itemName\">{e.name}</p>\n                  <Barcode background='#00000000' value={e.barcode}/>\n                </div>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}